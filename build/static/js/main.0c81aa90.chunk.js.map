{"version":3,"sources":["reducers/game.js","reducers/me.js","reducers/room.js","reducers/index.js","components/Card.js","components/App.js","socket.js","components/Root.js","actions/index.js","index.js","middleware.js"],"names":["COLORS","CARD_TYPES","cards","Array","keys","map","num","id","color","Math","floor","type","is_flipped","mats","initial_state","discards","players","name","reduce","curr","next","Object","assign","hands","slice","card","stacks","fill","removeCard","removed_card_id","card_id","filterOutCard","STACK_RE","HAND_RE","game","state","action","player_number","to_position","mat_id","new_cards","console","log","filter","hand","stack","includes","findIndex","el","push","match","groups","hand_position","error","mat","me","members","room","member","combineReducers","NullCard","position","moveCard","className","onDrop","e","preventDefault","dataTransfer","getData","onDragOver","NonNullCard","flipCard","draggable","onDragStart","setData","target","onDoubleClick","Card","Cards","key","CardsContainer","this","props","React","Component","connect","items","item_ids","Discards","idx","Hand","Stack","Player","player","NullPlayer","addPlayer","onClick","NonNullPlayer","removePlayer","GetName","onChangeName","bind","enterGame","setState","value","length","test","setName","onChange","App","socket","io","window","location","href","on","data","store","dispatch","onbeforeunload","disconnect","Container","emit","Root","createStore","rootReducer","applyMiddleware","thunkMiddleware","render","document","getElementById"],"mappings":"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","file":"static/js/main.0c81aa90.chunk.js","sourcesContent":["const COLORS = ['red', 'orange', 'blue', 'green', 'purple', 'yellow']\nconst CARD_TYPES = ['rose', 'skull']\n\nlet cards = [...Array(24).keys()].map(num => ({\n    id: `card_${num}`,\n    color: COLORS[Math.floor(num / 4)],\n    type: CARD_TYPES[(num % 4 === 0) ? 1 : 0],\n    is_flipped: false\n}))\n\nlet mats = [...Array(6).keys()].map(num => ({\n    id: `mat_${num}`,\n    color: COLORS[num],\n    is_flipped: false\n}))\n\n// Sample card positions\n// first position of player 3's hand\n// position = 'player-3-hand-0'\n// player 2's stack\n// position = 'player-2-stack'\n// discard pile\n// position = 'discard'\n\nconst initial_state = {\n    discards: [],\n    players: [\n        null,\n        null,\n        {\n            name: 'Test Name',\n            color: COLORS[2]\n        },\n        null,\n        null,\n        null], //Array(6).fill(null),\n    cards: cards.reduce((curr, next) => {\n        return Object.assign({}, curr, {\n            [next.id]: next\n        })\n    }, {}),\n    hands: [\n        cards.slice(0, 4).map(card => card.id),\n        cards.slice(4, 8).map(card => card.id),\n        cards.slice(8, 12).map(card => card.id),\n        cards.slice(12, 16).map(card => card.id),\n        cards.slice(16, 20).map(card => card.id),\n        cards.slice(20, 24).map(card => card.id)],\n    mats: mats.reduce((curr, next) => {\n        return Object.assign({}, curr, {\n            [next.id]: next\n        })\n    }, {}),\n    stacks: Array(6).fill([])\n}\n\nconst removeCard = (removed_card_id) => (card_id) => {\n    if (card_id === null){ return null }\n    return card_id === removed_card_id ? null : card_id\n}\n\nconst filterOutCard = (removed_card_id) => (card_id) => {\n    return card_id !== removed_card_id\n}\n\nconst STACK_RE = /player-(?<player_number>\\d)-stack/\nconst HAND_RE = /player-(?<player_number>\\d)-hand-(?<hand_position>\\d)/\n\nconst game = (state = initial_state, action) => {\n    let discards, hands, stacks, first_open_pos, found, players\n    const { player_number, name, card_id, to_position, mat_id } = action\n    switch (action.type) {\n\n        case 'REPLACE':\n            return Object.assign({}, state, {...action.game})\n\n        case 'ADD_PLAYER':\n            players = state.players\n            players[player_number] = {\n                name,\n                color: COLORS[player_number]\n            }\n            return Object.assign({}, state, {\n                players\n            })\n\n        case 'REMOVE_PLAYER':\n            players = state.players\n            players[player_number] = null\n            return Object.assign({}, state, {\n                players\n            })\n\n        case 'FLIP_CARD':\n            let new_cards = state.cards\n            new_cards[card_id].is_flipped = !new_cards[card_id].is_flipped\n            return Object.assign({}, state, {\n                cards: new_cards\n            })\n\n        case 'MOVE_CARD':\n            console.log('MOVE_CARD', card_id, 'to', to_position)\n            // Remove the card from where it is now\n            discards = state.discards.filter(filterOutCard(card_id))\n            hands = state.hands.map(hand => {\n                return hand.map(removeCard(card_id))\n            })\n            stacks = state.stacks.map(stack => {\n                return stack.filter(filterOutCard(card_id))\n            })\n            // Put the card in it's to_position\n            if (to_position.includes('discard')) {\n                first_open_pos = discards.findIndex(el => el === null)\n                discards.push(card_id)\n            } else if (to_position.includes('stack')) {\n                found = to_position.match(STACK_RE)\n                let { player_number } = found.groups\n                console.log('player_number', player_number)\n                stacks[player_number].push(card_id)\n            } else if (to_position.includes('hand')) {\n                found = to_position.match(HAND_RE)\n                let { player_number, hand_position } = found.groups\n                hands[player_number][hand_position] = card_id\n            } else {\n                console.error(`Could not move card ${card_id} to ${to_position}`)\n            }\n            console.log('stacks =', stacks)\n            return Object.assign({}, state, {\n                discards,\n                hands,\n                stacks\n            })\n\n        case 'FLIP_MAT':\n            return Object.assign({}, state, {\n                mats: mats.map(mat => {\n                    if (mat.id === mat_id) {\n                        mat.is_flipped = !mat.is_flipped\n                    }\n                    return mat\n                })\n            })\n\n        default:\n            return state\n    }\n}\n\nexport default game\n","const initial_state = {\n    name: null,\n    player_number: null,\n}\n\nconst me = (state = initial_state, action) => {\n    const { name, player_number } = action\n    switch (action.type) {\n        case 'SET_NAME':\n            return Object.assign({}, state, { name })\n        case 'ADD_PLAYER':\n            if (name === state.name) {\n                return Object.assign({}, state, { player_number })\n            }\n            return state\n        case 'REMOVE_PLAYER':\n            if (player_number === state.player_number) {\n                return Object.assign({}, state, { player_number: null })\n            }\n            return state\n        default:\n            return state\n    }\n}\n\nexport default me\n","\nconst initial_state = {\n    members: []\n}\n\nconst room = (state = initial_state, action) => {\n    let members\n    const { name } = action\n    switch (action.type) {\n        case 'REPLACE':\n            return Object.assign({}, state, {...action.room})\n\n        case 'ADD_MEMBER':\n            members = state.members\n            members.push(name)\n            return Object.assign({}, state, {\n                members\n            })\n        case 'REMOVE_MEMBER':\n            members = state.members.filter(member => {\n                return member !== name\n            })\n            return Object.assign({}, state, {\n                members\n            })\n        default:\n            return state\n    }\n}\n\nexport default room\n","import { combineReducers } from 'redux'\nimport game from './game'\nimport me from './me'\nimport room from './room'\n\nexport default combineReducers({\n    game,\n    me,\n    room,\n})\n","import React from 'react'\nimport { connect } from 'react-redux'\n\nconst NullCard = ({ position, moveCard }) => {\n    const onDrop = (e) => {\n        e.preventDefault()\n        const card_id = e.dataTransfer.getData('draggable_id')\n        moveCard(card_id, position)\n    }\n    return (\n        <div className='card null'\n            onDrop={onDrop}\n            onDragOver={(e) => e.preventDefault()}\n        />\n    )\n}\n\nconst NonNullCard = ({ id, color, type, is_flipped, flipCard }) => {\n    const onDragStart = (e) => {\n        e.dataTransfer.setData('draggable_id', e.target.id)\n    }\n    const onDoubleClick = () => {\n        flipCard(id)\n    }\n    return (\n        <div className={`card ${color}`} id={id}\n            draggable={true}\n            onDragStart={onDragStart}\n            onDoubleClick={onDoubleClick}\n        >\n            {is_flipped ? 'F' : 'N'}\n        </div>\n    )\n}\n\nconst Card = ({ position, card, moveCard, flipCard }) => {\n    if (card === null) {\n        return <NullCard position={position} moveCard={moveCard} />\n    } else {\n        return <NonNullCard {...card} flipCard={flipCard} />\n    }\n}\n\nconst Cards = ({ cards }) => (\n    <div className='cards'>\n        {cards.map(card => (\n            <Card card={card} key={card.id} />\n        ))}\n    </div>\n)\n\nclass CardsContainer extends React.Component {\n    componentDidMount() {\n        console.log('CardsContainer.componentDidMount')\n    }\n\n    render() {\n        const { cards } = this.props\n        return (\n            <Cards cards={cards} />\n        )\n    }\n}\n\nCardsContainer = connect(\n    state => {\n        const { items, item_ids} = state.cards\n        const cards = [...item_ids].map(id => items[id])\n        return {cards}\n    }\n)(CardsContainer)\n\nexport {\n    Card,\n    Cards,\n    CardsContainer,\n}\n","import React from 'react';\nimport { Card } from './Card'\n\nconst Discards = ({ discards, moveCard, flipCard }) => {\n    const onDrop = (e) => {\n        e.preventDefault()\n        const card_id = e.dataTransfer.getData('draggable_id')\n        moveCard(card_id, 'discard')\n    }\n    return (\n        <div id='discards-container'>\n            <h2>Discards</h2>\n            <div id='discards'\n                onDrop={onDrop}\n                onDragOver={(e) => e.preventDefault()}\n            >\n                {discards.map((card, idx) => (\n                    <Card card={card} key={idx}\n                        position={`discard-${idx}`}\n                        moveCard={moveCard}\n                        flipCard={flipCard}\n                    />\n                ))}\n            </div>\n        </div>\n    )\n}\n\nconst Hand = ({ player_number, cards, moveCard, flipCard }) => {\n    return (\n        <div className='hand'>\n            {cards.map((card, idx) => (\n                <Card card={card} key={idx}\n                    position={`player-${player_number}-hand-${idx}`}\n                    moveCard={moveCard}\n                    flipCard={flipCard}\n                />\n            ))}\n        </div>\n    )\n}\n\nconst Stack = ({ player_number, cards, moveCard, flipCard }) => {\n    const onDrop = (e) => {\n        e.preventDefault()\n        const card_id = e.dataTransfer.getData('draggable_id')\n        const position = `player-${player_number}-stack`\n        console.log('move card', card_id, 'to', position)\n        moveCard(card_id, position)\n    }\n    return (\n        <div className='stack'\n            onDrop={onDrop}\n            onDragOver={(e) => e.preventDefault()}\n        >\n            {cards.map((card, idx) => (\n                <Card card={card} key={idx}\n                    position={`player-${player_number}-stack`}\n                    moveCard={moveCard}\n                    flipCard={flipCard}\n                />\n            ))}\n        </div>\n    )\n}\n\nconst Player = (props) => {\n    if (props.player === null) {\n        return <NullPlayer {...props} />\n    } else {\n        return <NonNullPlayer {...props} />\n    }\n}\n\nconst NullPlayer = ({ player_number, player, me, addPlayer }) => {\n    const sitDown = () => {\n        if (me.name === null) return\n        console.log('Sitting down at position', player_number)\n        addPlayer(player_number, me.name)\n    }\n    return (\n        <div id={`player-{$player_number}`} className={`player`}>\n            {me.name !== null && me.player_number === null &&\n                <button onClick={sitDown}>\n                    Sit Down\n                </button>\n            }\n        </div>\n    )\n}\n\nconst NonNullPlayer = ({ player_number, player, me, removePlayer }) => {\n    const standUp = () => {\n        console.log('Stand up from position', player_number)\n        removePlayer(player_number)\n    }\n    return (\n        <div id={`player-{$player_number}`} className={`player ${player.color}`}>\n            <div className='info'>\n                {player.name}\n            </div>\n            {me.player_number !== null && player_number === me.player_number &&\n                <button onClick={standUp}>\n                    Stand Up\n                </button>\n            }\n        </div>\n    )\n}\n\nclass GetName extends React.Component {\n    constructor(props) {\n        super(props)\n        this.onChangeName = this.onChangeName.bind(this)\n        this.enterGame = this.enterGame.bind(this)\n        this.state = {\n            name: '',\n            error: null\n        }\n    }\n\n    componentDidMount() {\n        console.log('GetName.componentDidMount()')\n    }\n\n    onChangeName(e) {\n        this.setState({\n            name: e.target.value\n        })\n    }\n\n    enterGame() {\n        const { name } = this.state\n        if (name.length < 2) {\n            this.setState({\n                error: 'Name must be at least two characters'\n            })\n            return\n        }\n        if (!(/[a-z]+$/.test(name))) {\n            this.setState({\n                error: 'Name must be only [a-z] characters'\n            })\n            return\n        }\n        this.props.setName(name)\n    }\n\n    render() {\n        const { setName } = this.props\n        const { name, error } = this.state\n        return (\n            <div>\n                <h1>Skull</h1>\n                <h3>It is always a skull</h3>\n                <div id='set-name'>\n                    <p>Enter your name (only use [a-z])</p>\n                    <input type='text' value={name} onChange={this.onChangeName} />\n                    <button onClick={this.enterGame}>\n                        Enter\n                    </button>\n                    {error && (\n                        <div className='error'>{error}</div>\n                    )}\n                </div>\n            </div>\n        )\n    }\n}\n\nlet App = ({me, room, game, moveCard, flipCard, addPlayer, removePlayer, setName}) => {\n    if (me.name === null) {\n        return (\n            <GetName setName={setName} />\n        )\n    }\n    let {discards, players, cards, hands, mats, stacks} = game\n    discards = discards.map(card_id => {\n        return card_id === null ? null : cards[card_id]\n    })\n    hands = hands.map(hand => {\n        hand = hand.map(card_id => {\n            return card_id === null ? null : cards[card_id]\n        })\n        return hand\n    })\n    stacks = stacks.map(stack => {\n        stack = stack.map(card_id => {\n            return card_id === null ? null : cards[card_id]\n        })\n        return stack\n    })\n    return (\n        <div id='app'>\n            <div className='main'>\n                <div id='players-container'>\n                    <h2>Players</h2>\n                    <div id='players'>\n                        {players.map((player, idx) => (\n                            <Player player={player} me={me} addPlayer={addPlayer} removePlayer={removePlayer} player_number={idx} key={idx} />\n                        ))}\n                    </div>\n                </div>\n                <div id='hands-container'>\n                    <h2>Hands</h2>\n                    <div id='hands'>\n                        {hands.map((hand, idx) => (\n                            <Hand cards={hand} moveCard={moveCard} flipCard={flipCard} player_number={idx} key={idx} />\n                        ))}\n                    </div>\n                </div>\n                <div id='stacks-container'>\n                    <h2>Stacks</h2>\n                    <div id='stacks'>\n                        {stacks.map((stack, idx) => (\n                            <Stack cards={stack} moveCard={moveCard} flipCard={flipCard} player_number={idx} key={idx} />\n                        ))}\n                    </div>\n                </div>\n            </div>\n            <Discards discards={discards} moveCard={moveCard} flipCard={flipCard} />\n            <div id='room-container'>\n                <h2>Room</h2>\n                <ul>\n                    {room.members.map((member) => (\n                        <li>\n                            <span>{member}</span>\n                        </li>\n                    ))}\n                </ul>\n            </div>\n        </div>\n    )\n}\n\nexport default App\n","import io from 'socket.io-client'\nimport store from './index'\n// Setup sockets\nconst socket = io(window.location.href)\nsocket.on('message', data => {\n    console.log('got message')\n    console.log(data)\n})\nsocket.on('action', action => {\n    console.log('received action', action)\n    store.dispatch(action)\n})\n\nwindow.onbeforeunload = () => {\n    socket.disconnect()\n}\n\n//socket.emit('action', {this: 1})\n\nexport default socket\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Provider, connect } from 'react-redux'\nimport App from './App'\n\nimport { moveCard, flipCard, addPlayer, removePlayer, setName } from '../actions'\n\nclass Container extends React.Component {\n    constructor(props) {\n        super(props)\n    }\n\n    componentDidMount() {\n        console.log('Container.componentDidMount')\n    }\n\n    render() {\n        console.log('Container props=', this.props)\n        return (\n            <App {...this.props} />\n        )\n    }\n}\n\nContainer = connect(\n    state => {\n        return state\n    },\n    dispatch => {\n        return {\n            moveCard: (card_id, to_position) => dispatch(moveCard(card_id, to_position)),\n            flipCard: (card_id) => dispatch(flipCard(card_id)),\n            addPlayer: (player_number, name) => dispatch(addPlayer(player_number, name)),\n            removePlayer: (player_number) => dispatch(removePlayer(player_number)),\n            setName: (name) => dispatch(setName(name))\n        }\n    }\n)(Container)\n\nconst Root = ({ store }) => (\n    <Provider store={store}>\n        <Container />\n    </Provider>\n)\n\nRoot.propTypes = {\n    store: PropTypes.object.isRequired\n}\n\nexport {\n    Root,\n}\n","import socket from '../socket'\n\n// Me\nexport const setName = (name) => {\n    return (dispatch) => {\n        const action = {\n            type: 'SET_NAME',\n            name\n        }\n        socket.emit('action', action)\n        dispatch(action)\n        dispatch({\n            type: 'ADD_MEMBER',\n            name\n        })\n    }\n}\n\n// Player\nexport const addPlayer = (player_number, name) => {\n    return (dispatch) => {\n        const action = {\n            type: 'ADD_PLAYER',\n            player_number,\n            name\n        }\n        socket.emit('action', action)\n        dispatch(action)\n    }\n}\n\nexport const removePlayer = (player_number) => {\n    return (dispatch) => {\n        const action = {\n            type: 'REMOVE_PLAYER',\n            player_number\n        }\n        socket.emit('action', action)\n        dispatch(action)\n    }\n}\n\n// Card\n\nexport const flipCard = (card_id) => {\n    return (dispatch) => {\n        const action = {\n            type: 'FLIP_CARD',\n            card_id\n        }\n        socket.emit('action', action)\n        dispatch(action)\n    }\n}\n\nexport const moveCard = (card_id, to_position) => {\n    return (dispatch) => {\n        const action = {\n            type: 'MOVE_CARD',\n            card_id,\n            to_position\n        }\n        socket.emit('action', action)\n        dispatch(action)\n    }\n}\n\n// Mat\nexport const flipMat = (mat_id) => {\n    return (dispatch) => {\n        const action = {\n            type: 'FLIP_MAT',\n            mat_id\n        }\n        socket.emit('action', action)\n        dispatch(action)\n    }\n}\n\n\n","import React from 'react'\nimport { render } from 'react-dom'\nimport thunkMiddleware from 'redux-thunk'\nimport { createStore, applyMiddleware } from 'redux'\nimport rootReducer from './reducers'\nimport { Root } from './components/Root'\nimport { logger, sendAction } from './middleware'\nimport './index.css'\n\nconst store = createStore(\n    rootReducer,\n    applyMiddleware(\n        thunkMiddleware,\n        logger,\n    )\n)\n\nrender(\n    <Root store={store} />,\n    document.getElementById('root')\n)\n\nexport default store\n","import socket from './socket'\n\nexport const logger = store => next => action => {\n    console.log('logging action =', action)\n    let result = next(action)\n    return result\n}\n\nexport const sendAction = store => next => action => {\n    console.log('emitting action =', action)\n    socket.emit('action', action)\n    let result = next(action)\n    return result\n}\n"],"sourceRoot":""}